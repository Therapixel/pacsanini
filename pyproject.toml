[tool.black]
line-length = 88
target-version = ["py37", "py38"]
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "def __repr__", "if __name__ == .__main__.:"]

[tool.isort]
profile = "black"
src_paths = ["src/pacsanini"]
line_length = 88
lines_after_imports = 2
lines_between_types = 1
include_trailing_comma = true

[tool.poetry]
name = "pacsanini"
version = "0.2.0"
description = "A package for DICOM utilities."
license = "Apache 2.0"
authors = ["Aurélien Chick <achick@therapixel.com>"]
maintainers = ["Aurélien Chick <achick@therapixel.com>"]
readme = "README.md"
keywords = [
  "DICOM", "PACS", "medical imagery",
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Build Tools",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3 :: Only"
]
packages = [
    { include = "pacsanini", from = "src" },
]
include = [
  "LICENSE",
  "LICENSES",
]

[tool.poetry.dependencies]
python = "^3.7.1"
pydicom = "^2.1.2"
pydantic = ">=1.7.4"
PyYAML = ">=5.4"
click = "^7.1.2"
pandas = "^1.2.4"
pynetdicom = "^1.5.7"
loguru = "^0.5.3"
SQLAlchemy = {extras = ["mypy"], version = "^1.4.22"}
SQLAlchemy-Utils = "^0.37.8"
prefect = "^0.15.6"

[tool.poetry.dev-dependencies]
pytest = "^6.2.1"
pytest-cov = "^2.10.1"
pre-commit = "^2.9.3"
pyproject-flake8 = "^0.0.1-alpha.2"
black = "^21.5b0"
isort = "^5.8.0"
pyinstaller = "^4.3"
autoflake = "^1.4"
pylint = "^2.8.2"
mkdocs = "^1.1.2"
mkdocs-material = "^7.1.5"
mkdocstrings = "^0.15.1"
pytkdocs = {extras = ["numpy-style"], version = "^0.11.1"}
mkdocs-click = "^0.4.0"
notebook = "^6.4.0"
pylint-pytest = "^1.1.2"
tox = "^3.23.1"
mypy = "^0.910"
types-click = "^7.1.2"
types-PyYAML = "^5.4.3"
pytest-docker = "^0.10.3"
types-requests = "^2.25.8"

[tool.poetry.scripts]
pacsanini = 'pacsanini.cli:entry_point'

[tool.pylint.basic]
good-names=["ae", "_", "i", "v", "ds"]

[tool.pylint.design]
max-args=8
max-branches=15
max-locals=16

[tool.pylint.master]
fail-under="9.0"
suggestion-mode="yes"
extension-pkg-whitelist="pydantic"
load-plugins="pylint_pytest"

[tool.pylint.messages_control]
disable=[
    "print-statement",
    "parameter-unpacking",
    "unpacking-in-except",
    "old-raise-syntax",
    "backtick",
    "long-suffix",
    "old-ne-operator",
    "old-octal-literal",
    "import-star-module-level",
    "non-ascii-bytes-literal",
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "apply-builtin",
    "basestring-builtin",
    "buffer-builtin",
    "cmp-builtin",
    "coerce-builtin",
    "execfile-builtin",
    "file-builtin",
    "long-builtin",
    "raw_input-builtin",
    "reduce-builtin",
    "standarderror-builtin",
    "unicode-builtin",
    "xrange-builtin",
    "coerce-method",
    "delslice-method",
    "getslice-method",
    "setslice-method",
    "no-absolute-import",
    "old-division",
    "dict-iter-method",
    "dict-view-method",
    "next-method-called",
    "metaclass-assignment",
    "indexing-exception",
    "raising-string",
    "reload-builtin",
    "oct-method",
    "hex-method",
    "nonzero-method",
    "cmp-method",
    "input-builtin",
    "round-builtin",
    "intern-builtin",
    "unichr-builtin",
    "map-builtin-not-iterating",
    "zip-builtin-not-iterating",
    "range-builtin-not-iterating",
    "filter-builtin-not-iterating",
    "using-cmp-argument",
    "eq-without-hash",
    "div-method",
    "idiv-method",
    "rdiv-method",
    "exception-message-attribute",
    "invalid-str-codec",
    "sys-max-int",
    "bad-python3-import",
    "deprecated-string-function",
    "deprecated-str-translate-call",
    "deprecated-itertools-function",
    "deprecated-types-field",
    "next-method-defined",
    "dict-items-not-iterating",
    "dict-keys-not-iterating",
    "dict-values-not-iterating",
    "deprecated-operator-function",
    "deprecated-urllib-function",
    "xreadlines-attribute",
    "deprecated-sys-function",
    "exception-escape",
    "comprehension-escape"
]

[tool.pylint.format]
max-line-length=88

[tool.pytest.ini_options]
addopts = "--cov=src/pacsanini --cov-report=term-missing --cov-report=html --durations=10"
markers = [
  "cli",
  "config",
  "convert",
  "db",
  "io",
  "net",
  "parse",
  "pipeline",
  "utils",
]
minversion = "6.0"
testpaths = ["tests"]
filterwarnings = [
  'ignore:Starting in pydicom 3.0, Dataset.file_meta must be a FileMetaDataset class instance',
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
